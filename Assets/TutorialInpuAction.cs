//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/TutorialInpuAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TutorialInpuAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TutorialInpuAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TutorialInpuAction"",
    ""maps"": [
        {
            ""name"": ""TutorialPlayer"",
            ""id"": ""95c3c2d1-d113-48e0-b5f5-91e1efb3d722"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d1030dee-b22f-427b-a175-45b5d873c413"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c1ae3962-ee6a-42ce-868b-7319ace5109b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a1de5ee9-2f6f-4fcf-8fbe-d1e65de48a3e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5080ebc0-a561-472d-b8f4-208dfe387de5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""28247ae6-ddf9-4d66-9fb7-f431106b2c7b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e682bf82-b27c-401f-8e7e-e8c3f59c577e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0202ef2b-76f9-4917-ac1d-0df1d3cca033"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a0891146-105b-4cb2-b41a-24bba688a6ab"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""52af607c-d233-40f6-8e02-7a10c54f2b94"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5329103e-5760-4b9d-a554-a62c74a52657"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cac61402-c734-47f3-8c59-003e0c4a4404"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e6100a2f-5ba1-4f0f-b81e-f39cb52a256c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TutorialPlayer
        m_TutorialPlayer = asset.FindActionMap("TutorialPlayer", throwIfNotFound: true);
        m_TutorialPlayer_Move = m_TutorialPlayer.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TutorialPlayer
    private readonly InputActionMap m_TutorialPlayer;
    private List<ITutorialPlayerActions> m_TutorialPlayerActionsCallbackInterfaces = new List<ITutorialPlayerActions>();
    private readonly InputAction m_TutorialPlayer_Move;
    public struct TutorialPlayerActions
    {
        private @TutorialInpuAction m_Wrapper;
        public TutorialPlayerActions(@TutorialInpuAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TutorialPlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_TutorialPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TutorialPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ITutorialPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_TutorialPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TutorialPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ITutorialPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ITutorialPlayerActions instance)
        {
            if (m_Wrapper.m_TutorialPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITutorialPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_TutorialPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TutorialPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TutorialPlayerActions @TutorialPlayer => new TutorialPlayerActions(this);
    public interface ITutorialPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
